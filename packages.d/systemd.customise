#!/bin/bash
# Copyright (C) 2017 Hamish Coleman <hamish@zot.org>


DEBOOT="$1"
ARCH="$2"


# TODO
# - figure out where to put common fragments like this
wants() {
    local WANTS="$1"
    local THIS="$2"

    local WANTSDIR="${DEBOOT}/etc/systemd/system/${WANTS}.wants"
    mkdir -p "${WANTSDIR}"
    ln -sf "${THIS}" "${WANTSDIR}"
}


# This filename is hardcoded in /lib/udev/rules.d/73-usb-net-by-mac.rules :-(
cat <<EOF >${DEBOOT}/etc/systemd/network/99-default.link
# just use the simple old kernel names for all interfaces
[Link]
NamePolicy=kernel database
MACAddressPolicy=persistent
EOF

# install ethernet configuration config
cat <<EOF >${DEBOOT}/etc/systemd/network/95-defaulteth.network
# By default, all ethernet ports are clients trying to become our upstream
[Match]
Name=eth* en*

[Network]
DHCP=yes
IPv4LLRoute=yes
LLMNR=true
MulticastDNS=true
LLDP=true
EmitLLDP=true
EOF

cat <<EOF >${DEBOOT}/etc/systemd/system/fix-eth0-linkup.service
# FIXME
# - on the orange pi zero I am testing (and armbian kernel 4.10.0-sun8i #8),
#   if the system boots up without the ethernet plugged in, it goes into
#   "operational off" state in networkctl with the link set to down -
#   and never comes back, regardless of the cable plug state.  performing
#   an ip link set eth0 up (cable plugged or unplugged) restores service.
#   I have also noted in previous tests that it sometimes takes two
#   "link set up" commands (with the first incurring a kernel error)
#   before the link state actually comes - so this might be related.
#   Either way, need to add a shim that does a ip link set up...
[Unit]
Description=the fix for link issues on some hardware
After=sys-subsystem-net-devices-eth0.device
Before=systemd-networkd.service

[Service]
Type=oneshot
ExecStart=-/sbin/ip link set eth0 up
ExecStart=-/sbin/ip link set eth0 up
# technically only one link up is needed, as networkd provides the other..
EOF
wants systemd-networkd.service /etc/systemd/system/fix-eth0-linkup.service

# make the wlan devices for hostap match "*hostap.link"
cat <<EOF >${DEBOOT}/etc/systemd/network/95-wlan-hostap.link
# By default, all wlan interfaces will be access points
[Match]
Type=wlan

[Link]
NamePolicy=kernel database
MACAddressPolicy=persistent
EOF

cat <<EOF >${DEBOOT}/etc/systemd/network/95-wlan-hostap.network
# By default, all wlan interfaces will be access points
[Match]
Type=wlan

[Network]
DHCPServer=yes
LLMNR=true
MulticastDNS=true
LLDP=true
EmitLLDP=true
Address=0.0.0.0/24
IPForward=true
IPMasquerade=true
EOF

cat <<EOF >${DEBOOT}/etc/systemd/network/85-mesh.network
# By default, any of these type of wifi cards are used for mesh networking
# TODO - wire up a script to set that up
[Match]
Type=wlan
Driver=rt2800usb

[Network]
LinkLocalAddressing=yes
IPv4LLRoute=yes
LLMNR=true
MulticastDNS=true
LLDP=true
EmitLLDP=true
EOF

