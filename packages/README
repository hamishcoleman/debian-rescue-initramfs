This directory contains files named after debian packages.  There are
two types of files - "${package}.files" and "${package}.${stage}"
scripts.

The ".files" contain simple lists of files to check or remove from
each package - these lists are machine readable and can be used to do
consistancy checking on the package and file ownership.  This files
are read during the "minimise" phase, before any scripts are run.

The "package.stage" scripts are responsible for any more complex
customisations.  These customisations are applied in several phases,
and each package that is found installed in the rescue system will
attempt to run its matching script during each phase.

Curently the phases are:

"minimise"
    During this phase, anything that can be removed to minimise the
    installed size is removed.  This is when the ".files" are processed.

"busybox"
    If busybox is used, it can replace a large number of binaries
    belonging to other packages.  This is technically a space minimisation
    technique, but it is put in a separate phase so that these actions are
    clearly separated from the other packages deleting their own files.
    (It is expected that only the busybox package script will implement
    this phase)

"fixup"
    This phase performs the changes needed to make the image actually
    bootable.  Any service startup warnings and errors are also addressed
    here.

Output and exit codes:

These scripts are expected to be silent on their output unless they encounter
an error.  The exit codes are interpreted as follows:

    0       all successful
    1       the requested stage is not supported by this script (not an error)
    other   an error was encountered - stop the build

The ".files" file format:

For simple minimisation by removal of files, the ".files" defines a list
of files and directories to delete (during the minimise phase).  In the
future, this list will also be used to highlight when the installed
package version contains files that are not expected (and thus might
be suitable for deleting, or need new fixups).  To facilitate this,
the list is structured as a tagged list, with one line for each file.

Each line is a tag followed by a filename, with the following defined
tags:

    false    - replace this file with a symlink to /bin/false
    keep     - This file is needed, do not delete it
    rm       - Delete this unneeded file
    todo     - Needs more checking, do not delete
    touch    - replace this file with a zero byte file
    true     - replace this file with an exe that always has exitcode 0

By default, any file specified must be owned by the correct package.
Any action can also have the suffix ",nopkg" appended to specify instead
that the file must not be owned by any package.

The list of "todo" files serves as a hit-list of files that that it
might be possible to delete.  Care should be taken before deleting a
file on the "keep" list.

