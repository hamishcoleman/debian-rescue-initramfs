#!/bin/bash

DEBOOT="$1"
ARCH="$2"
STAGE="$3"

FILES_LIST="
"

# TODO
# - /etc/default/mactelnet-server can be replaced with a smaller one
# - /etc/init.d/mactelnet-server should eventually be replaced entirely with
#   a systemd unit file

# /usr/share/doc, /usr/share/locale and /usr/share/man
# are all dealt with centrally


if [ "$STAGE" = "minimise" ]; then
    # remove files
    echo "$FILES_LIST" | while read action file; do
        case "$action" in
        r)  eval rm -f "${DEBOOT}/$file"
            ;;
        esac
    done
elif [ "$STAGE" = "fixup" ]; then
    # the mactelenetd will exit if it finds no up interfaces with ip addreses,
    # which is often the case in the rescue environment, so we take steps to
    # ensure that the service is constantly restarted until it is working.
    cat <<EOF >${DEBOOT}/etc/systemd/system/mactelnet-server.service
[Unit]
Description=LSB: Telnet daemon for Mikrotik Mac-Telnet protocol
Conflicts=shutdown.target

[Install]
WantedBy=multi-user.target

[Service]
Type=forking
Restart=always
RestartSec=10
TimeoutSec=20
IgnoreSIGPIPE=no
KillMode=process
RemainAfterExit=no
ExecStart=/etc/init.d/mactelnet-server start
ExecStop=/etc/init.d/mactelnet-server stop
EOF

    # manually install this unit to run on startup
    mkdir -p ${DEBOOT}/etc/systemd/system/multi-user.target.wants
    ln -sf /etc/systemd/system/mactelnet-server.service ${DEBOOT}/etc/systemd/system/multi-user.target.wants

    # the initscript ends up running two copies of the daemon
    perl -pi -e 's/start-stop-daemon .* --test/true /' ${DEBOOT}/etc/init.d/mactelnet-server

else
    # unsupported stage
    exit 1
fi

